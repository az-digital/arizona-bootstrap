I"ÉU<h2 id="individual-or-compiled">Individual or Compiled</h2>

<p>Plugins can be included individually (using Arizona Bootstrapâ€™s individual <code class="highlighter-rouge">js/dist/*.js</code>), or all at once using <code class="highlighter-rouge">arizona-bootstrap.js</code> or the minified <code class="highlighter-rouge">arizona-bootstrap.min.js</code> (donâ€™t include both).</p>

<p>If you use a bundler (Webpack, Rollupâ€¦), you can use <code class="highlighter-rouge">/js/dist/*.js</code> files which are UMD ready.</p>

<h2 id="dependencies">Dependencies</h2>

<p>Some plugins and CSS components depend on other plugins. If you include plugins individually, make sure to check for these dependencies in the docs. Also note that <strong>all plugins depend on jQuery</strong> (this means jQuery must be included <strong>before</strong> the plugin files). <a href="https://github.com/az-digital/arizona-bootstrap/blob/v0.0.2/package.json">Consult our <code class="highlighter-rouge">package.json</code></a> to see which versions of jQuery are supported.</p>

<p>Our dropdowns, popovers and tooltips also depend on <a href="https://popper.js.org/">Popper.js</a>.</p>

<h2 id="data-attributes">Data Attributes</h2>

<p>Nearly all Arizona Bootstrap plugins can be enabled and configured through HTML alone with data attributes (our preferred way of using JavaScript functionality). Be sure to <strong>only use one set of data attributes on a single element</strong> (e.g., you cannot trigger a tooltip and modal from the same button.)</p>

<p>However, in some situations it may be desirable to disable this functionality. To disable the data attribute API, unbind all events on the document namespaced with <code class="highlighter-rouge">data-api</code> like so:</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">off</span><span class="p">(</span><span class="dl">'</span><span class="s1">.data-api</span><span class="dl">'</span><span class="p">)</span></code></pre></figure>

<p>Alternatively, to target a specific plugin, just include the pluginâ€™s name as a namespace along with the data-api namespace like this:</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">off</span><span class="p">(</span><span class="dl">'</span><span class="s1">.alert.data-api</span><span class="dl">'</span><span class="p">)</span></code></pre></figure>

<div class="bd-callout bd-callout-warning">
<h2 id="selectors">Selectors</h2>

<p>Currently to query DOM elements we use the native methods <code class="highlighter-rouge">querySelector</code> and <code class="highlighter-rouge">querySelectorAll</code> for performance reasons, so you have to use <a href="https://www.w3.org/TR/CSS21/syndata.html#value-def-identifier">valid selectors</a>.
If you use special selectors, for example: <code class="highlighter-rouge">collapse:Example</code> be sure to escape them.</p>
</div>

<h2 id="events">Events</h2>

<p>Arizona Bootstrap provides custom events for most pluginsâ€™ unique actions. Generally, these come in an infinitive and past participle form - where the infinitive (ex. <code class="highlighter-rouge">show</code>) is triggered at the start of an event, and its past participle form (ex. <code class="highlighter-rouge">shown</code>) is triggered on the completion of an action.</p>

<p>All infinitive events provide <a href="https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault"><code class="highlighter-rouge">preventDefault()</code></a> functionality. This provides the ability to stop the execution of an action before it starts. Returning false from an event handler will also automatically call <code class="highlighter-rouge">preventDefault()</code>.</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="dl">'</span><span class="s1">#myModal</span><span class="dl">'</span><span class="p">).</span><span class="nx">on</span><span class="p">(</span><span class="dl">'</span><span class="s1">show.bs.modal</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">e</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">()</span> <span class="c1">// stops modal from being shown</span>
  <span class="p">}</span>
<span class="p">})</span></code></pre></figure>

<h2 id="programmatic-api">Programmatic API</h2>

<p>We also believe you should be able to use all Arizona Bootstrap plugins purely through the JavaScript API. All public APIs are single, chainable methods, and return the collection acted upon.</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="dl">'</span><span class="s1">.btn.danger</span><span class="dl">'</span><span class="p">).</span><span class="nx">button</span><span class="p">(</span><span class="dl">'</span><span class="s1">toggle</span><span class="dl">'</span><span class="p">).</span><span class="nx">addClass</span><span class="p">(</span><span class="dl">'</span><span class="s1">fat</span><span class="dl">'</span><span class="p">)</span></code></pre></figure>

<p>All methods should accept an optional options object, a string which targets a particular method, or nothing (which initiates a plugin with default behavior):</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="dl">'</span><span class="s1">#myModal</span><span class="dl">'</span><span class="p">).</span><span class="nx">modal</span><span class="p">()</span> <span class="c1">// initialized with defaults</span>
<span class="nx">$</span><span class="p">(</span><span class="dl">'</span><span class="s1">#myModal</span><span class="dl">'</span><span class="p">).</span><span class="nx">modal</span><span class="p">({</span> <span class="na">keyboard</span><span class="p">:</span> <span class="kc">false</span> <span class="p">})</span> <span class="c1">// initialized with no keyboard</span>
<span class="nx">$</span><span class="p">(</span><span class="dl">'</span><span class="s1">#myModal</span><span class="dl">'</span><span class="p">).</span><span class="nx">modal</span><span class="p">(</span><span class="dl">'</span><span class="s1">show</span><span class="dl">'</span><span class="p">)</span> <span class="c1">// initializes and invokes show immediately</span></code></pre></figure>

<p>Each plugin also exposes its raw constructor on a <code class="highlighter-rouge">Constructor</code> property: <code class="highlighter-rouge">$.fn.popover.Constructor</code>. If youâ€™d like to get a particular plugin instance, retrieve it directly from an element: <code class="highlighter-rouge">$('[rel="popover"]').data('popover')</code>.</p>

<h3 id="asynchronous-functions-and-transitions">Asynchronous Functions and Transitions</h3>

<p>All programmatic API methods are <strong>asynchronous</strong> and return to the caller once the transition is started but <strong>before it ends</strong>.</p>

<p>In order to execute an action once the transition is complete, you can listen to the corresponding event.</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="dl">'</span><span class="s1">#myCollapse</span><span class="dl">'</span><span class="p">).</span><span class="nx">on</span><span class="p">(</span><span class="dl">'</span><span class="s1">shown.bs.collapse</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// Action to execute once the collapsible area is expanded</span>
<span class="p">})</span></code></pre></figure>

<p>In addition a method call on a <strong>transitioning component will be ignored</strong>.</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="dl">'</span><span class="s1">#myCarousel</span><span class="dl">'</span><span class="p">).</span><span class="nx">on</span><span class="p">(</span><span class="dl">'</span><span class="s1">slid.bs.carousel</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">$</span><span class="p">(</span><span class="dl">'</span><span class="s1">#myCarousel</span><span class="dl">'</span><span class="p">).</span><span class="nx">carousel</span><span class="p">(</span><span class="dl">'</span><span class="s1">2</span><span class="dl">'</span><span class="p">)</span> <span class="c1">// Will slide to the slide 2 as soon as the transition to slide 1 is finished</span>
<span class="p">})</span>

<span class="nx">$</span><span class="p">(</span><span class="dl">'</span><span class="s1">#myCarousel</span><span class="dl">'</span><span class="p">).</span><span class="nx">carousel</span><span class="p">(</span><span class="dl">'</span><span class="s1">1</span><span class="dl">'</span><span class="p">)</span> <span class="c1">// Will start sliding to the slide 1 and returns to the caller</span>
<span class="nx">$</span><span class="p">(</span><span class="dl">'</span><span class="s1">#myCarousel</span><span class="dl">'</span><span class="p">).</span><span class="nx">carousel</span><span class="p">(</span><span class="dl">'</span><span class="s1">2</span><span class="dl">'</span><span class="p">)</span> <span class="c1">// !! Will be ignored, as the transition to the slide 1 is not finished !!</span></code></pre></figure>

<h3 id="default-settings">Default Settings</h3>

<p>You can change the default settings for a plugin by modifying the pluginâ€™s <code class="highlighter-rouge">Constructor.Default</code> object:</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="c1">// changes default for the modal plugin's `keyboard` option to false</span>
<span class="nx">$</span><span class="p">.</span><span class="nx">fn</span><span class="p">.</span><span class="nx">modal</span><span class="p">.</span><span class="nx">Constructor</span><span class="p">.</span><span class="nx">Default</span><span class="p">.</span><span class="nx">keyboard</span> <span class="o">=</span> <span class="kc">false</span></code></pre></figure>

<h2 id="no-conflict">No Conflict</h2>

<p>Sometimes it is necessary to use Arizona Bootstrap plugins with other UI frameworks. In these circumstances, namespace collisions can occasionally occur. If this happens, you may call <code class="highlighter-rouge">.noConflict</code> on the plugin you wish to revert the value of.</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">bootstrapButton</span> <span class="o">=</span> <span class="nx">$</span><span class="p">.</span><span class="nx">fn</span><span class="p">.</span><span class="nx">button</span><span class="p">.</span><span class="nx">noConflict</span><span class="p">()</span> <span class="c1">// return $.fn.button to previously assigned value</span>
<span class="nx">$</span><span class="p">.</span><span class="nx">fn</span><span class="p">.</span><span class="nx">bootstrapBtn</span> <span class="o">=</span> <span class="nx">bootstrapButton</span> <span class="c1">// give $().bootstrapBtn the Arizona Bootstrap functionality</span></code></pre></figure>

<h2 id="version-numbers">Version Numbers</h2>

<p>The version of each of Arizona Bootstrapâ€™s jQuery plugins can be accessed via the <code class="highlighter-rouge">VERSION</code> property of the pluginâ€™s constructor. For example, for the tooltip plugin:</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">.</span><span class="nx">fn</span><span class="p">.</span><span class="nx">tooltip</span><span class="p">.</span><span class="nx">Constructor</span><span class="p">.</span><span class="nx">VERSION</span> <span class="c1">// =&gt; "0.0.2"</span></code></pre></figure>

<h2 id="no-special-fallbacks-when-javascript-is-disabled">No Special Fallbacks when JavaScript is Disabled</h2>

<p>Arizona Bootstrapâ€™s plugins donâ€™t fall back particularly gracefully when JavaScript is disabled. If you care about the user experience in this case, use <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/noscript"><code class="highlighter-rouge">&lt;noscript&gt;</code></a> to explain the situation (and how to re-enable JavaScript) to your users, and/or add your own custom fallbacks.</p>

<div class="bd-callout bd-callout-warning">
<h5 id="third-party-libraries">Third-party Libraries</h5>

<p><strong>Arizona Bootstrap does not officially support third-party JavaScript libraries</strong> like Prototype or jQuery UI. Despite <code class="highlighter-rouge">.noConflict</code> and namespaced events, there may be compatibility problems that you need to fix on your own.</p>
</div>

<h2 id="util">Util</h2>

<p>All Arizona Bootstrapâ€™s JavaScript files depend on <code class="highlighter-rouge">util.js</code> and it has to be included alongside the other JavaScript files. If youâ€™re using the compiled (or minified) <code class="highlighter-rouge">bootstrap.js</code>, there is no need to include thisâ€”itâ€™s already there.</p>

<p><code class="highlighter-rouge">util.js</code> includes utility functions and a basic helper for <code class="highlighter-rouge">transitionEnd</code> events as well as a CSS transition emulator. Itâ€™s used by the other plugins to check for CSS transition support and to catch hanging transitions.</p>

<h2 id="sanitizer">Sanitizer</h2>

<p>Tooltips and Popovers use our built-in sanitizer to sanitize options which accept HTML.</p>

<p>The default <code class="highlighter-rouge">whiteList</code> value is the following:</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">ARIA_ATTRIBUTE_PATTERN</span> <span class="o">=</span> <span class="sr">/^aria-</span><span class="se">[\w</span><span class="sr">-</span><span class="se">]</span><span class="sr">*$/i</span>
<span class="kd">var</span> <span class="nx">DefaultWhitelist</span> <span class="o">=</span> <span class="p">{</span>
  <span class="c1">// Global attributes allowed on any supplied element below.</span>
  <span class="dl">'</span><span class="s1">*</span><span class="dl">'</span><span class="p">:</span> <span class="p">[</span><span class="dl">'</span><span class="s1">class</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">dir</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">id</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">lang</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">role</span><span class="dl">'</span><span class="p">,</span> <span class="nx">ARIA_ATTRIBUTE_PATTERN</span><span class="p">],</span>
  <span class="na">a</span><span class="p">:</span> <span class="p">[</span><span class="dl">'</span><span class="s1">target</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">href</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">title</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">rel</span><span class="dl">'</span><span class="p">],</span>
  <span class="na">area</span><span class="p">:</span> <span class="p">[],</span>
  <span class="na">b</span><span class="p">:</span> <span class="p">[],</span>
  <span class="na">br</span><span class="p">:</span> <span class="p">[],</span>
  <span class="na">col</span><span class="p">:</span> <span class="p">[],</span>
  <span class="na">code</span><span class="p">:</span> <span class="p">[],</span>
  <span class="na">div</span><span class="p">:</span> <span class="p">[],</span>
  <span class="na">em</span><span class="p">:</span> <span class="p">[],</span>
  <span class="na">hr</span><span class="p">:</span> <span class="p">[],</span>
  <span class="na">h1</span><span class="p">:</span> <span class="p">[],</span>
  <span class="na">h2</span><span class="p">:</span> <span class="p">[],</span>
  <span class="na">h3</span><span class="p">:</span> <span class="p">[],</span>
  <span class="na">h4</span><span class="p">:</span> <span class="p">[],</span>
  <span class="na">h5</span><span class="p">:</span> <span class="p">[],</span>
  <span class="na">h6</span><span class="p">:</span> <span class="p">[],</span>
  <span class="na">i</span><span class="p">:</span> <span class="p">[],</span>
  <span class="na">img</span><span class="p">:</span> <span class="p">[</span><span class="dl">'</span><span class="s1">src</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">alt</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">title</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">width</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">height</span><span class="dl">'</span><span class="p">],</span>
  <span class="na">li</span><span class="p">:</span> <span class="p">[],</span>
  <span class="na">ol</span><span class="p">:</span> <span class="p">[],</span>
  <span class="na">p</span><span class="p">:</span> <span class="p">[],</span>
  <span class="na">pre</span><span class="p">:</span> <span class="p">[],</span>
  <span class="na">s</span><span class="p">:</span> <span class="p">[],</span>
  <span class="na">small</span><span class="p">:</span> <span class="p">[],</span>
  <span class="na">span</span><span class="p">:</span> <span class="p">[],</span>
  <span class="na">sub</span><span class="p">:</span> <span class="p">[],</span>
  <span class="na">sup</span><span class="p">:</span> <span class="p">[],</span>
  <span class="na">strong</span><span class="p">:</span> <span class="p">[],</span>
  <span class="na">u</span><span class="p">:</span> <span class="p">[],</span>
  <span class="na">ul</span><span class="p">:</span> <span class="p">[]</span>
<span class="p">}</span></code></pre></figure>

<p>If you want to add new values to this default <code class="highlighter-rouge">whiteList</code> you can do the following:</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">myDefaultWhiteList</span> <span class="o">=</span> <span class="nx">$</span><span class="p">.</span><span class="nx">fn</span><span class="p">.</span><span class="nx">tooltip</span><span class="p">.</span><span class="nx">Constructor</span><span class="p">.</span><span class="nx">Default</span><span class="p">.</span><span class="nx">whiteList</span>

<span class="c1">// To allow table elements</span>
<span class="nx">myDefaultWhiteList</span><span class="p">.</span><span class="nx">table</span> <span class="o">=</span> <span class="p">[]</span>

<span class="c1">// To allow td elements and data-option attributes on td elements</span>
<span class="nx">myDefaultWhiteList</span><span class="p">.</span><span class="nx">td</span> <span class="o">=</span> <span class="p">[</span><span class="dl">'</span><span class="s1">data-option</span><span class="dl">'</span><span class="p">]</span>

<span class="c1">// You can push your custom regex to validate your attributes.</span>
<span class="c1">// Be careful about your regular expressions being too lax</span>
<span class="kd">var</span> <span class="nx">myCustomRegex</span> <span class="o">=</span> <span class="sr">/^data-my-app-</span><span class="se">[\w</span><span class="sr">-</span><span class="se">]</span><span class="sr">+/</span>
<span class="nx">myDefaultWhiteList</span><span class="p">[</span><span class="dl">'</span><span class="s1">*</span><span class="dl">'</span><span class="p">].</span><span class="nx">push</span><span class="p">(</span><span class="nx">myCustomRegex</span><span class="p">)</span></code></pre></figure>

<p>If you want to bypass our sanitizer because you prefer to use a dedicated library, for example <a href="https://www.npmjs.com/package/dompurify">DOMPurify</a>, you should do the following:</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">$</span><span class="p">(</span><span class="dl">'</span><span class="s1">#yourTooltip</span><span class="dl">'</span><span class="p">).</span><span class="nx">tooltip</span><span class="p">({</span>
  <span class="na">sanitizeFn</span><span class="p">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">content</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">DOMPurify</span><span class="p">.</span><span class="nx">sanitize</span><span class="p">(</span><span class="nx">content</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">})</span></code></pre></figure>

:ET