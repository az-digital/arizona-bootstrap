# Release workflow
#
# Release PR manually created with:
#   Minor & Patch Releases:
#     - Updated dist assets
#     - Updated version info in package.json
#   Minor Releases Only:
#   - Update version references in documentation
#
# Workflow triggered upon push to master containing changes to package.json
#  If version number has changed (and is not dev):
#     - Creates release tag
#     - Pushes release tag
#     - Creates GitHub release (and release notes?)
#     - Updates arizona-bootstrap-packagist repo (@kevcooper suggested adding a GitHub actions workflow to the arizona-bootstrap-packagist repo that can be triggered by an arizona-bootstrap release/tag)
#     - Changes version info in package.json "back to dev"
#     - Commits and pushes

on:
  push:
    branches:
      - master
      - feature/73-alt
    paths:
      - package.json

name: Create Release

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-18.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          ssh-key: ${{ secrets.AZ_BOOTSTRAP_DEPLOY_KEY }}
      - name: Build Variables
        run: |
          echo "::set-env name=AZ_VERSION::$(jq -r '.version' package.json)"
          echo "::set-env name=AZ_SHORT_VERSION::$(jq -r '.version_short' package.json)"
          echo "::set-env name=AZ_BOOTSTRAP_SOURCE_DIR::arizona-bootstrap-src"
          labelledimage=$(scripts/build-container.sh | grep 'ImageID=')
          echo "::set-env name=AZ_DOCKER_IMAGE::${labelledimage#ImageID=}"
      - name: Create Release
        if: ${{ endsWith(env.AZ_VERSION, '-dev') == false }}
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "v${{ env.AZ_VERSION }}"
          release_name: "v${{ env.AZ_VERSION }}"
          draft: false
          prerelease: false #${{ contains(env.AZ_VERSION, '-alpha') }}
      # - name: Find the tag
      #   if: ${{ endsWith(env.AZ_VERSION, '-dev') == false }}
      #   run: echo "::set-env name=AZ_TRIMMED_REF::${GITHUB_REF#refs/*/}"
      - name: Build review site artifact
        if: ${{ endsWith(env.AZ_VERSION, '-dev') == false }}
        run: |
          export AZ_REVIEW_BASEURL="/arizona-bootstrap/${AZ_VERSION}"
          docker run --rm -e "AZ_SITE_BASE_URL=${AZ_REVIEW_BASEURL}" -v $(pwd):/${AZ_BOOTSTRAP_SOURCE_DIR} ${AZ_DOCKER_IMAGE} expose-review-site
      - name: Update digital.arizona.edu
        # When we figure out the repository_dispatch event, we should do that here
        # to notify digital.arizona.edu of a new version.
        if: ${{ endsWith(env.AZ_VERSION, '-dev') == false }}
        run: |
          (
            echo "${{ secrets.AZ_DIGITAL_SITE_DEPLOY_KEY }}" > ${HOME}/.ssh/az_digital_deploy_key
            chmod 600 ${HOME}/.ssh/az_digital_deploy_key
            git config --global user.email "${GITHUB_ACTOR}@users.noreply.github.com"
            git config --global user.name "${GITHUB_ACTOR}"
            export GIT_SSH_COMMAND="ssh -i ${HOME}/.ssh/az_digital_deploy_key"
            git clone git@github.com:az-digital/digital.arizona.edu.git /tmp/digital.arizona.edu
            rsync --recursive --delete _site/ /tmp/digital.arizona.edu/docs/arizona-bootstrap
            cd /tmp/digital.arizona.edu
            git add docs/arizona-bootstrap
            git commit -m "Update docs for ${AZ_VERSION}"
            git push
            unset GIT_SSH_COMMAND
            rm ${HOME}/.ssh/az_digital_deploy_key
          )
      - name: Back to dev
        if: ${{ endsWith(env.AZ_VERSION, '-dev') == false }}
        run: |
          jq --arg suffix '-dev' '.version |= . + $suffix' package.json > package.json.new
          mv package.json.new package.json
          jq --arg suffix '-dev' '.version |= . + $suffix' package-lock.json > package-lock.json.new
          mv package-lock.json.new package-lock.json
          git config --global user.email "${GITHUB_ACTOR}@users.noreply.github.com"
          git config --global user.name "${GITHUB_ACTOR}"
          git add package.json package-lock.json
          git commit -m 'Back to dev'
          git push
