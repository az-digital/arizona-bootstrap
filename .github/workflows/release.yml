name: Create Release
on:
  workflow_dispatch:
    inputs:
      version:
        description: The version to tag and release
        required: true

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-18.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          ssh-key: ${{ secrets.AZ_BOOTSTRAP_DEPLOY_KEY }}

      - name: Set variables for Docker images
        # Can't currently use hashFiles(). See: https://github.community/t/hashfiles-with-multiple-patterns/17168
        run: |
          lockhash=$(find Dockerfile Gemfile.lock package-lock.json scripts -type f -exec sha256sum {} \; | awk '{ print $1 }' | sha256sum - | awk '{ print $1 }')
          registry='docker.pkg.github.com'
          imageprefix="${registry}/${GITHUB_REPOSITORY}/"
          imagename='az-nodejs-ephemeral'
          echo "AZ_DOCKER_REGISTRY=${registry}" >> ${GITHUB_ENV}
          echo "AZ_EPHEMERAL_IMAGE=${imageprefix}${imagename}:${lockhash}" >> ${GITHUB_ENV}
          echo "AZ_BOOTSTRAP_SOURCE_DIR=arizona-bootstrap-src" >> ${GITHUB_ENV}

      - name: Docker authentication
        run: |
          docker login "$AZ_DOCKER_REGISTRY" -u "$GITHUB_ACTOR" -p ${{ secrets.GITHUB_TOKEN }}

      - name: Search for Docker image
        id: dockerpull
        continue-on-error: true
        run: |
          docker pull "$AZ_EPHEMERAL_IMAGE"

      - name: Conditionally rebuild and save the Docker image
        if: ${{ steps.dockerpull.outcome == 'failure' }}
        run: |
          docker build -t "$AZ_EPHEMERAL_IMAGE" .
          docker push "$AZ_EPHEMERAL_IMAGE"

      - name: Build variables
        run: |
          stem='arizona-bootstrap'
          version=$(jq -r '.version' package.json)
          version_short=$(jq -r '.version_short' package.json)
          echo "AZ_REVIEW_BASEURL=/${stem}" >> ${GITHUB_ENV}
          echo "AZ_REVIEW_STEM=${stem}" >> ${GITHUB_ENV}
          echo "AZ_SHORT_VERSION=${version_short}" >> ${GITHUB_ENV}
          echo "AZ_VERSION=${version}" >> ${GITHUB_ENV}

      - name: Update version
        run: |
          git config --global user.email "${GITHUB_ACTOR}@users.noreply.github.com"
          git config --global user.name "${GITHUB_ACTOR}"
          docker run --rm -e "AZ_SITE_BASE_URL=${AZ_REVIEW_BASEURL}" -v $(pwd):"/${AZ_BOOTSTRAP_SOURCE_DIR}" "$AZ_EPHEMERAL_IMAGE" create-source-links && npm run --no-git-tag-version "${{ github.event.inputs.version }}"
          git add dist package.json package-lock.json
          git commit -m '${{ github.event.inputs.version }}'
          git push
          echo "RELEASE_SHA=$(git rev-parse HEAD)" >> ${GITHUB_ENV}

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          commitish: "${{ env.RELEASE_SHA }}"
          tag_name: "v${{ env.AZ_VERSION }}"
          release_name: "v${{ env.AZ_VERSION }}"
          draft: false
          prerelease: false #${{ contains(env.AZ_VERSION, '-alpha') }}

      - name: Save new SHA to file
        run: |
          echo "{\"sha\": \"$(git rev-parse HEAD)\"}" > variables.json

      - name: Upload variables
        uses: actions/upload-artifact@v1
        with:
          name: artifact
          path: variables.json

  dispatch:
    needs: release
    strategy:
      matrix:
        repo:
          - az-digital/arizona-bootstrap
          - az-digital/arizona-bootstrap-packagist
          - az-digital/digital.arizona.edu
    runs-on: ubuntu-latest
    steps:
    - name: Download variables
      uses: actions/download-artifact@v1
      with:
        name: artifact

    - name: Update environment variables
      run: |
        echo "RELEASE_SHA=$(cat artifact/variables.json | jq -r '.sha' )" >> ${GITHUB_ENV}

      - name: Notify dependencies
        uses: peter-evans/repository-dispatch@1708dda5703a768a0fb0ef6a7a03a0c3805ebc59
        with:
          token: ${{ secrets.REPO_DISPATCH_TOKEN }}
          repository: ${{ matrix.repo }}
          event-type: az_bootstrap_release
          client-payload: '{"version": "${{ github.event.inputs.version }}", "ref": "${{ env.RELEASE_SHA }}", "sha": "${{ env.RELEASE_SHA }}"}'
