name: Create Release
run-name: Create `${{ inputs.version }}` release from `${{ github.ref_name }}` branch
on:
  workflow_dispatch:
    inputs:
      version:
        description: The version to tag and release
        required: true
      prerelease:
        description: Is this a pre-release?
        required: false
        default: false
        type: boolean
      make_latest:
        description: Should this be made the latest release?
        required: false
        default: false
        type: boolean

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    permissions: write-all
    outputs:
      release_sha: ${{ steps.update_version.outputs.release_sha }}
      branch_name: ${{ steps.update_version.outputs.branch_name }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          token: ${{ secrets.REPO_DISPATCH_TOKEN }}

      - name: Set variables for Docker images
        run: |
          oldhash=${{ hashFiles('Dockerfile', 'package.json', 'package-lock.json', 'scripts/*') }}
          imageprefix="${{ vars.AZ_DOCKER_REGISTRY }}/${GITHUB_REPOSITORY}/"
          imagestem="${imageprefix}${{ vars.AZ_EPHEMERALIMAGENAME }}:"
          echo "AZ_OLD_HASH=${oldhash}" >> ${GITHUB_ENV}
          echo "AZ_IMAGE_STEM=${imagestem}" >> ${GITHUB_ENV}
          echo "AZ_BOOTSTRAP_SOURCE_DIR=/arizona-bootstrap-source" >> ${GITHUB_ENV}
          echo "AZ_BOOTSTRAP_FROZEN_DIR=/azbuild/arizona-bootstrap" >> ${GITHUB_ENV}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker authentication
        uses: docker/login-action@v3
        with:
          registry: ${{ vars.AZ_DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Unconditionally rebuild and save the Docker image
        run: |
          workingtitle="${{ vars.AZ_EPHEMERALIMAGENAME }}:working"
          docker buildx build --load --platform=linux/amd64 --no-cache -t "$workingtitle" --build-arg AZ_BOOTSTRAP_FROZEN_DIR .
          tempname="old${AZ_OLD_HASH}"
          docker run --name "$tempname" "$workingtitle" true
          docker cp -a "${tempname}:${AZ_BOOTSTRAP_FROZEN_DIR}/." .
          docker rm "$tempname"
          lockhash=${{ hashFiles('Dockerfile', 'package.json', 'package-lock.json', 'scripts/*') }}
          ephemeral="${AZ_IMAGE_STEM}${lockhash}"
          docker tag "$workingtitle" "$ephemeral"
          docker push "$ephemeral"
          echo "AZ_EPHEMERAL_IMAGE=${ephemeral}" >> ${GITHUB_ENV}

      - name: Update version and create tag
        id: update_version
        run: |
          sudo touch config.yml
          sudo find . -path "./.git" -prune -o -exec chown 1000:1000 {} \;
          sudo chown 1000:1000 .
          git config --global user.email "${GITHUB_ACTOR}@users.noreply.github.com"
          git config --global user.name "${GITHUB_ACTOR}"
          docker run --rm -e "AZ_RELEASE_VERSION=${{ github.event.inputs.version }}" -v $(pwd):"${AZ_BOOTSTRAP_SOURCE_DIR}" "$AZ_EPHEMERAL_IMAGE" create-release
          git add -f dist package.json package-lock.json
          git commit -m '${{ github.event.inputs.version }}'
          git push
          git tag "v${{ github.event.inputs.version }}"
          git push origin "v${{ github.event.inputs.version }}"
          echo "release_sha=$(git rev-parse HEAD)" >> "$GITHUB_OUTPUT"
          echo "branch_name=${GITHUB_REF_NAME}" >> "$GITHUB_OUTPUT"

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag_name: "v${{ github.event.inputs.version }}"
          name: "v${{ github.event.inputs.version }}"
          draft: false
          make_latest: ${{ github.event.inputs.make_latest }}
          prerelease: ${{ github.event.inputs.prerelease }}

  dispatch:
    needs: release
    strategy:
      matrix:
        repo: ${{ fromJSON(vars.AZ_DISPATCH_TO) }}
    runs-on: ubuntu-latest
    env:
      RELEASE_SHA: ${{ needs.release.outputs.release_sha }}
      BRANCH_NAME: ${{ needs.release.outputs.branch_name }}
    steps:
      - name: Notify dependencies
        uses: peter-evans/repository-dispatch@v3
        with:
          token: ${{ secrets.REPO_DISPATCH_TOKEN }}
          repository: ${{ matrix.repo }}
          event-type: az_bootstrap_release
          client-payload: '{"version": "${{ github.event.inputs.version }}", "ref": "${{ env.RELEASE_SHA }}", "sha": "${{ env.RELEASE_SHA }}", "branch": "${{env.BRANCH_NAME}}", "make_latest": "${{ github.event.inputs.make_latest }}", "prerelease": "${{ github.event.inputs.prerelease }}"}'
