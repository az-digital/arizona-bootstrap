name: Create Release
on:
  push:
    branches:
      - main
    paths:
      - package.json

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-18.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          ssh-key: ${{ secrets.AZ_BOOTSTRAP_DEPLOY_KEY }}
      - name: Set variables for Docker images
        # Can't currently use hashFiles(). See: https://github.community/t/hashfiles-with-multiple-patterns/17168
        run: |
          lockhash=$(find Dockerfile Gemfile.lock package-lock.json scripts -type f -exec sha256sum {} \; | awk '{ print $1 }' | sha256sum - | awk '{ print $1 }')
          registry='docker.pkg.github.com'
          imageprefix="${registry}/${GITHUB_REPOSITORY}/"
          imagename='az-nodejs-ephemeral'
          echo "::set-env name=AZ_DOCKER_REGISTRY::${registry}"
          echo "::set-env name=AZ_EPHEMERAL_IMAGE::${imageprefix}${imagename}:${lockhash}"
          echo "::set-env name=AZ_BOOTSTRAP_SOURCE_DIR::arizona-bootstrap-src"
      - name: Docker authentication
        run: |
          docker login "$AZ_DOCKER_REGISTRY" -u "$GITHUB_ACTOR" -p ${{ secrets.GITHUB_TOKEN }}
      - name: Search for Docker image
        id: dockerpull
        continue-on-error: true
        run: |
          docker pull "$AZ_EPHEMERAL_IMAGE"
      - name: Conditionally rebuild and save the Docker image
        if: ${{ steps.dockerpull.outcome == 'failure' }}
        run: |
          docker build -t "$AZ_EPHEMERAL_IMAGE" .
          docker push "$AZ_EPHEMERAL_IMAGE"
      - name: Build variables
        run: |
          stem='arizona-bootstrap'
          version=$(jq -r '.version' package.json)
          version_short=$(jq -r '.version_short' package.json)
          echo "::set-env name=AZ_REVIEW_BASEURL::/${stem}"
          echo "::set-env name=AZ_REVIEW_STEM::${stem}"
          echo "::set-env name=AZ_SHORT_VERSION::${version_short}"
          echo "::set-env name=AZ_VERSION::${version}"
      - name: Create Release
        if: ${{ endsWith(env.AZ_VERSION, '-dev') == false }}
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "v${{ env.AZ_VERSION }}"
          release_name: "v${{ env.AZ_VERSION }}"
          draft: false
          prerelease: false #${{ contains(env.AZ_VERSION, '-alpha') }}
      - name: Build review site artifact
        if: ${{ endsWith(env.AZ_VERSION, '-dev') == false }}
        run: |
          docker run --rm -e "AZ_SITE_BASE_URL=${AZ_REVIEW_BASEURL}" -v $(pwd):"/${AZ_BOOTSTRAP_SOURCE_DIR}" "$AZ_EPHEMERAL_IMAGE" expose-review-site
      - name: Update digital.arizona.edu
        # When we figure out the repository_dispatch event, we should do that here
        # to notify digital.arizona.edu of a new version.
        if: ${{ endsWith(env.AZ_VERSION, '-dev') == false }}
        run: |
          (
            echo "${{ secrets.AZ_DIGITAL_SITE_DEPLOY_KEY }}" > ${HOME}/.ssh/az_digital_deploy_key
            chmod 600 ${HOME}/.ssh/az_digital_deploy_key
            git config --global user.email "${GITHUB_ACTOR}@users.noreply.github.com"
            git config --global user.name "${GITHUB_ACTOR}"
            export GIT_SSH_COMMAND="ssh -i ${HOME}/.ssh/az_digital_deploy_key"
            git clone git@github.com:az-digital/digital.arizona.edu.git /tmp/digital.arizona.edu
            rsync --recursive --delete _site/ /tmp/digital.arizona.edu/docs${AZ_REVIEW_BASEURL}
            cd /tmp/digital.arizona.edu
            git add docs/${AZ_REVIEW_STEM}
            git commit -m "Update Arizona Bootstrap docs for ${AZ_VERSION}"
            git push
            unset GIT_SSH_COMMAND
            rm ${HOME}/.ssh/az_digital_deploy_key
          )
      - name: Update packagist
        if: ${{ endsWith(env.AZ_VERSION, '-dev') == false }}
        run: |
          (
            echo "${{ secrets.AZ_BOOTSTRAP_PACKAGIST_DEPLOY_KEY }}" > ${HOME}/.ssh/az_bootstrap_packagist_deploy_key
            chmod 600 ${HOME}/.ssh/az_bootstrap_packagist_deploy_key
            git config --global user.email "${GITHUB_ACTOR}@users.noreply.github.com"
            git config --global user.name "${GITHUB_ACTOR}"
            GIT_SSH_COMMAND="ssh -i ${HOME}/.ssh/az_bootstrap_packagist_deploy_key"
            export GIT_SSH_COMMAND
            distwhitelist='css js'
            srcroot='dist'
            clonedir='/tmp/arizona-bootstrap-packagist/'
            git clone git@github.com:az-digital/arizona-bootstrap-packagist.git "$clonedir"
            for w in $distwhitelist ; do
              rsync --recursive --delete "${srcroot}/${w}" "$clonedir"
            done
            cd "$clonedir"
            git add .
            git commit -m "Update Arizona Bootstrap Packagist for ${AZ_VERSION}"
            git push
            unset GIT_SSH_COMMAND
            rm ${HOME}/.ssh/az_bootstrap_packagist_deploy_key
          )

      - name: Back to dev
        if: ${{ endsWith(env.AZ_VERSION, '-dev') == false }}
        run: |
          jq --arg suffix '-dev' '.version |= . + $suffix' package.json > package.json.new
          mv package.json.new package.json
          jq --arg suffix '-dev' '.version |= . + $suffix' package-lock.json > package-lock.json.new
          mv package-lock.json.new package-lock.json
          git config --global user.email "${GITHUB_ACTOR}@users.noreply.github.com"
          git config --global user.name "${GITHUB_ACTOR}"
          git add package.json package-lock.json
          git commit -m 'Back to dev'
          git push

      # ========================================================================
      # Another mitigation until we start using repository_dispatch
      # or figure out how to get tags created in this action to trigger other actions.
      # Ideally this would be handled by a separate cdn-deploy action
      # ========================================================================
      - name: Build CDN assets
        if: ${{ endsWith(env.AZ_VERSION, '-dev') == false }}
        run: |
          docker run --rm -v $(pwd):"/$AZ_BOOTSTRAP_SOURCE_DIR" "$AZ_EPHEMERAL_IMAGE" build-cdn-assets

      - name: Configure AWS credentials
        if: ${{ endsWith(env.AZ_VERSION, '-dev') == false }}
        uses: aws-actions/configure-aws-credentials@b77dc228388218453070969c00c26dc392ecb114
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Deploy CDN assets to S3 + CloudFront
        if: ${{ endsWith(env.AZ_VERSION, '-dev') == false }}
        run: |
            aws s3 sync --cache-control max-age=691200 dist/ s3://${{ secrets.AZ_DIGITAL_CDN_BUCKET }}/lib/arizona-bootstrap/${AZ_VERSION}/
            aws cloudfront create-invalidation --distribution-id ${{ secrets.AZ_DIGITAL_CDN }} --paths /lib/arizona-bootstrap/${AZ_VERSION}/*

      - name: Update 'latest' CDN assets to S3 + CloudFront
        if: ${{ endsWith(env.AZ_VERSION, '-dev') == false }}
        run: |
          aws s3 sync --cache-control max-age=691200 dist/ s3://${{ secrets.AZ_DIGITAL_CDN_BUCKET }}/lib/arizona-bootstrap/latest/
          aws cloudfront create-invalidation --distribution-id ${{ secrets.AZ_DIGITAL_CDN }} --paths /lib/arizona-bootstrap/latest/*
      # ========================================================================
