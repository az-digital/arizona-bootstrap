name: Create Release
on:
  push:
    branches:
      - main
    paths:
      - package.json

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-18.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          ssh-key: ${{ secrets.AZ_BOOTSTRAP_DEPLOY_KEY }}

      - name: Set variables for Docker images
        # Can't currently use hashFiles(). See: https://github.community/t/hashfiles-with-multiple-patterns/17168
        run: |
          lockhash=$(find Dockerfile Gemfile.lock package-lock.json scripts -type f -exec sha256sum {} \; | awk '{ print $1 }' | sha256sum - | awk '{ print $1 }')
          registry='docker.pkg.github.com'
          imageprefix="${registry}/${GITHUB_REPOSITORY}/"
          imagename='az-nodejs-ephemeral'
          echo "::set-env name=AZ_DOCKER_REGISTRY::${registry}"
          echo "::set-env name=AZ_EPHEMERAL_IMAGE::${imageprefix}${imagename}:${lockhash}"
          echo "::set-env name=AZ_BOOTSTRAP_SOURCE_DIR::arizona-bootstrap-src"

      - name: Docker authentication
        run: |
          docker login "$AZ_DOCKER_REGISTRY" -u "$GITHUB_ACTOR" -p ${{ secrets.GITHUB_TOKEN }}

      - name: Search for Docker image
        id: dockerpull
        continue-on-error: true
        run: |
          docker pull "$AZ_EPHEMERAL_IMAGE"

      - name: Conditionally rebuild and save the Docker image
        if: ${{ steps.dockerpull.outcome == 'failure' }}
        run: |
          docker build -t "$AZ_EPHEMERAL_IMAGE" .
          docker push "$AZ_EPHEMERAL_IMAGE"

      - name: Build variables
        run: |
          stem='arizona-bootstrap'
          version=$(jq -r '.version' package.json)
          version_short=$(jq -r '.version_short' package.json)
          echo "::set-env name=AZ_REVIEW_BASEURL::/${stem}"
          echo "::set-env name=AZ_REVIEW_STEM::${stem}"
          echo "::set-env name=AZ_SHORT_VERSION::${version_short}"
          echo "::set-env name=AZ_VERSION::${version}"

      - name: Create Release
        if: ${{ endsWith(env.AZ_VERSION, '-dev') == false }}
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "v${{ env.AZ_VERSION }}"
          release_name: "v${{ env.AZ_VERSION }}"
          draft: false
          prerelease: false #${{ contains(env.AZ_VERSION, '-alpha') }}

      - name: Upload package.json
        uses: actions/upload-artifact@v1
        with:
          name: artifact
          path: ./package.json

      - name: Back to dev
        if: ${{ endsWith(env.AZ_VERSION, '-dev') == false }}
        run: |
          jq --arg suffix '-dev' '.version |= . + $suffix' package.json > package.json.new
          mv package.json.new package.json
          jq --arg suffix '-dev' '.version |= . + $suffix' package-lock.json > package-lock.json.new
          mv package-lock.json.new package-lock.json
          git config --global user.email "${GITHUB_ACTOR}@users.noreply.github.com"
          git config --global user.name "${GITHUB_ACTOR}"
          git add package.json package-lock.json
          git commit -m 'Back to dev'
          git push

  dispatch:
    needs: release
    strategy:
      matrix:
        repo:
          - az-digital/arizona-bootstrap
          - az-digital/arizona-bootstrap-packagist
          - az-digital/digital.arizona.edu
    runs-on: ubuntu-latest
    steps:
      - name: Download package.json
        uses: actions/download-artifact@v1
        with:
          name: artifact

      - name: Release variables
        run: |
          version=$(jq -r '.version' artifact/package.json)
          version_short=$(jq -r '.version_short' artifact/package.json)
          echo "::set-env name=AZ_SHORT_VERSION::${version_short}"
          echo "::set-env name=AZ_VERSION::${version}"

      - name: Notify dependencies
        if: ${{ endsWith(env.AZ_VERSION, '-dev') == false }}
        uses: peter-evans/repository-dispatch@1708dda5703a768a0fb0ef6a7a03a0c3805ebc59
        with:
          token: ${{ secrets.REPO_DISPATCH_TOKEN }}
          repository: ${{ matrix.repo }}
          event-type: az_bootstrap_release
          client-payload: '{"version": "${{ env.AZ_VERSION }}", "ref": "${{ github.ref }}", "sha": "${{ github.sha }}"}'
