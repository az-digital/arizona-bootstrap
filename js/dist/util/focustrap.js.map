{"version":3,"file":"focustrap.js","sources":["../../src/util/focustrap.js"],"sourcesContent":["/**\n * --------------------------------------------------------------------------\n * Bootstrap util/focustrap.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\nimport EventHandler from '../dom/event-handler.js'\nimport SelectorEngine from '../dom/selector-engine.js'\nimport Config from './config.js'\n\n/**\n * Constants\n */\n\nconst NAME = 'focustrap'\nconst DATA_KEY = 'bs.focustrap'\nconst EVENT_KEY = `.${DATA_KEY}`\nconst EVENT_FOCUSIN = `focusin${EVENT_KEY}`\nconst EVENT_KEYDOWN_TAB = `keydown.tab${EVENT_KEY}`\n\nconst TAB_KEY = 'Tab'\nconst TAB_NAV_FORWARD = 'forward'\nconst TAB_NAV_BACKWARD = 'backward'\n\nconst Default = {\n  autofocus: true,\n  trapElement: null // The element to trap focus inside of\n}\n\nconst DefaultType = {\n  autofocus: 'boolean',\n  trapElement: 'element'\n}\n\n/**\n * Class definition\n */\n\nclass FocusTrap extends Config {\n  constructor(config) {\n    super()\n    this._config = this._getConfig(config)\n    this._isActive = false\n    this._lastTabNavDirection = null\n  }\n\n  // Getters\n  static get Default() {\n    return Default\n  }\n\n  static get DefaultType() {\n    return DefaultType\n  }\n\n  static get NAME() {\n    return NAME\n  }\n\n  // Public\n  activate() {\n    if (this._isActive) {\n      return\n    }\n\n    if (this._config.autofocus) {\n      this._config.trapElement.focus()\n    }\n\n    EventHandler.off(document, EVENT_KEY) // guard against infinite focus loop\n    EventHandler.on(document, EVENT_FOCUSIN, event => this._handleFocusin(event))\n    EventHandler.on(document, EVENT_KEYDOWN_TAB, event => this._handleKeydown(event))\n\n    this._isActive = true\n  }\n\n  deactivate() {\n    if (!this._isActive) {\n      return\n    }\n\n    this._isActive = false\n    EventHandler.off(document, EVENT_KEY)\n  }\n\n  // Private\n  _handleFocusin(event) {\n    const { trapElement } = this._config\n\n    if (event.target === document || event.target === trapElement || trapElement.contains(event.target)) {\n      return\n    }\n\n    const elements = SelectorEngine.focusableChildren(trapElement)\n\n    if (elements.length === 0) {\n      trapElement.focus()\n    } else if (this._lastTabNavDirection === TAB_NAV_BACKWARD) {\n      elements[elements.length - 1].focus()\n    } else {\n      elements[0].focus()\n    }\n  }\n\n  _handleKeydown(event) {\n    if (event.key !== TAB_KEY) {\n      return\n    }\n\n    this._lastTabNavDirection = event.shiftKey ? TAB_NAV_BACKWARD : TAB_NAV_FORWARD\n  }\n}\n\nexport default FocusTrap\n"],"names":["NAME","DATA_KEY","EVENT_KEY","EVENT_FOCUSIN","EVENT_KEYDOWN_TAB","TAB_KEY","TAB_NAV_FORWARD","TAB_NAV_BACKWARD","Default","autofocus","trapElement","DefaultType","FocusTrap","_Config","config","_this","call","_config","_getConfig","_isActive","_lastTabNavDirection","_inheritsLoose","_proto","prototype","activate","_this2","focus","EventHandler","off","document","on","event","_handleFocusin","_handleKeydown","deactivate","target","contains","elements","SelectorEngine","focusableChildren","length","key","shiftKey","_createClass","get","Config"],"mappings":"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"}